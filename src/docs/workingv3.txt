	override void OnGameStart()
	{
		super.OnGameStart();
		
		string spawnGroup = "{35681BE27C302FF5}Prefabs/Groups/BLUFOR/GreenBerets/Group_US_GreenBeret_SentryTeam.et";
		string waypointType = "{06E1B6EBD480C6E0}Prefabs/AI/Waypoints/AIWaypoint_ForcedMove.et";
		
		IEntity spawnPosition = GetGame().GetWorld().FindEntityByName("AI_Spawn_1");
		
		// Generate random waypoint number between 1 and 20
        int rand_wp_num = Math.RandomIntInclusive(1, 20);
        string waypointName = "AI_Drive_Target_" + rand_wp_num;
		IEntity waypointPosition = GetGame().GetWorld().FindEntityByName(waypointName);
		
		GetGame().GetCallqueue().CallLater(AISpawner, 1000, false, spawnGroup, spawnPosition.GetOrigin(), waypointType, waypointPosition.GetOrigin());
	}
	
	protected void AISpawner(string spawnGroup, vector spawnPosition, string waypointType, vector waypointPosition){
		Resource resource = GenerateAndValidateResource(spawnGroup);
		
		if(!resource){
			Print(("[AI Spawner] Unable to load resource for the spaw group: " + spawnGroup), LogLevel.ERROR);
			return;
		}
		
		SCR_AIGroup group = SCR_AIGroup.Cast(GetGame().SpawnEntityPrefab(resource, null, GenerateSpawnParameters(spawnPosition)));
		
		if(!group){
			Print("[AI Spawner] Unable to spawn group!", LogLevel.ERROR);
			return;
		}
		
		IEntity carID = GetGame().GetWorld().FindEntityByName("AI_Car_1");
	
		if(!carID){
			Print("[AI Spawner] Unable to load vehicle resource!", LogLevel.ERROR);
			return;
		}
		//group.AddUsableVehicle(carID);
		ref array<string> aiStaticVehicles = new array<string>();
		aiStaticVehicles.Insert("AI_Car_1");
		group.AddVehiclesStatic(aiStaticVehicles);
		
		CreateWaypoint(group, waypointType, waypointPosition);
	}
	
	protected void CreateWaypoint(SCR_AIGroup group, string waypointType, vector waypointPosition){
		Resource resource = GenerateAndValidateResource(waypointType);
		
		if(!resource){
			Print(("[Create Waypoint] Unable to load resource for waypoint: " + waypointType), LogLevel.ERROR);
			return;
		}	
		
		AIWaypoint waypoint = AIWaypoint.Cast(GetGame().SpawnEntityPrefab(resource, null, GenerateSpawnParameters(waypointPosition)));
		
		if(!waypoint)
		{
			Print("[Create Waypoint] Unable to create waypoint!", LogLevel.ERROR);
			return;
		}
		
		group.AddWaypoint(waypoint);
	}
	
	protected Resource GenerateAndValidateResource(string resourceToLoad){
		Resource resource = Resource.Load(resourceToLoad);
		
		if(!resource.IsValid()){
			Print(("[Generate and Validate Resource] Resource is invalid: " + resourceToLoad), LogLevel.ERROR);
			return null;
		}
		
		return resource;
	}
	
	protected EntitySpawnParams GenerateSpawnParameters(vector position){
		EntitySpawnParams params = EntitySpawnParams();
		params.TransformMode = ETransformMode.WORLD;
		
		params.Transform[3] = position;
		
		return params;
	}